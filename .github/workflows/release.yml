name: Build & Release

on:
  push:
    tags:
      - 'v*'  # Runs only when a new version tag (e.g., v1.0.0) is pushed

jobs:
  build:
    name: Build and Release Executables
    runs-on: ubuntu-latest  # Only run on Ubuntu

    strategy:
      matrix:
        target: [win-x64, linux-x64, osx-x64]  # Build for different platforms

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x  # Change based on your project

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Publish executable for ${{ matrix.target }}
        run: dotnet publish -c Release -r ${{ matrix.target }} --self-contained true -o ./build/${{ matrix.target }}

      - name: Zip build files
        run: |
          cd build/${{ matrix.target }}
          zip -r ../../chess-engine-${{ matrix.target }}.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: chess-engine-${{ matrix.target }}
          path: chess-engine-${{ matrix.target }}.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Generate Changelog from commits
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "CHANGELOG=First release ðŸŽ‰" >> $GITHUB_ENV
          else
            LOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges)
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            echo "$LOG" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            ðŸš€ **New release!**

            ðŸ”„ **Changelog:**
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
          files: artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
